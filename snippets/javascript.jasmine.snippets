###################
# WORKFLOW BLOCKS #
###################
# Describe
snippet des
	describe("${1:description}", function() {
		${2}
	});

# Before Each
snippet bef
	beforeEach(function() {
		${1}
	});

# After Each
snippet aft
	afterEach(function() {
		${1}
	});

# It
snippet it
	it("${1:description}", function() {
		${2}
	});

# Runs
snippet ru
	runs(function() {
		${1}
	});
# Waits
snippet wa
	waits(${1});
##############################
# MATCHERS AND MATCH HELPERS #
##############################
# Expect not to be undefined
snippet notu
	expect(${1:target}).not.toBeUndefined();
# Expect not to be defined
snippet notd
	expect(${1:target}).not.toBeDefined();
# Expect not to be truthy
snippet nott
	expect(${1:target}).not.toBeTruthy();
# Expect not to be falsy
snippet notf
	expect(${1:target}).not.toBeFalsy();
# Expect not to be null
snippet notn
	expect(${1:target}).not.toBeNull();
# Expect not to contain
snippet notc
	expect(${1:target}).not.toContain(${2:value});
# Expect not to equal
snippet note
	expect(${1:target}).not.toEqual(${2:value});
# Expect not to be
snippet notb
	expect(${1:target}).not.toBe(${2:value});
# Expect not to match
snippet notm
	expect(${1:target}).not.toMatch();
# Expect not
snippet notx
	expect(${1:target}).not${2};
# Expect to be undefined
snippet eu
	expect(${1:target}).toBeUndefined();
# Expect to be defined
snippet ed
	expect(${1:target}).toBeDefined();
# Expect to be truthy
snippet et
	expect(${1:target}).toBeTruthy();
# Expect to be falsy
snippet ef
	expect(${1:target}).toBeFalsy();
# Expect to be null
snippet en
	expect(${1:target}).toBeNull();
# Expect to contain
snippet ec
	expect(${1:target}).toContain(${2:value});
# Expect to equal
snippet ee
	expect(${1:target}).toEqual(${2:value});
# Expect to be
snippet eb
	expect(${1:target}).toBe(${2:value});
# Expect to match
snippet em
	expect(${1:target}).toMatch(${2:pattern});
# Expect
snippet ex
	expect(${1:target})${2};
# Any
snippet any
	jasmine.any(${1})
##################
# METHOD HELPERS #
##################
# Expect was not called
snippet notca
	expect(${1:target}).not.toHaveBeenCalled();
# Expect was not called with
snippet notcw
	expect(${1:target}).not.toHaveBeenCalledWith(${2:arguments});
# Expect was called
snippet eca
	expect(${1:target}).toHaveBeenCalled();
# Expect was called with
snippet ecw
	expect(${1:target}).toHaveBeenCalledWith(${2:arguments});
##########
# SPYING #
##########
# Spy on
snippet s
	spyOn(${1:object}, "${2:method}");
# Spy on and call through
snippet sct
	spyOn(${1:object}, "${2:method}").andCallThrough();
# Spy on and call fake
snippet scf
	spyOn(${1:object}, "${2:method}").andCallFake(${3:function});
# Spy on and return
snippet sr
	spyOn(${1:object}, "${2:method}").andReturn(${3:arguments});
# Spy on and throw
snippet st
	spyOn(${1:object}, "${2:method}").andThrow(${3:exception});
